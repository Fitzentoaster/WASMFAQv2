@page "/edit"

@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Edit</PageTitle>
@if (OperatingSystem.IsBrowser() == false)
{
	<p>Still rendering on the server</p>
}
else if (qnaSets == null)
{
	<MudGrid Justify="Justify.Center">
		<MudItem xs="12" sm="6">
			<MudCard>
				<MudCardHeader>
					<MudText Typo="Typo.h5"><b>Loading...</b></MudText>
				</MudCardHeader>
			</MudCard>
		</MudItem>
	</MudGrid>
}
else
{
	<MudThemeProvider IsDarkMode="true" />
	<MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Href="/">Home</MudButton>

	<MudGrid Justify="Justify.Center">
		<MudItem xs="12" sm="6">
			<MudCard GutterBottom="true">
				<MudCardHeader>
					<MudText Typo="Typo.h5"><b>Edit FAQs</b></MudText>
				</MudCardHeader>
				<MudCardContent>
					<MudText>Here you can view and edit FAQs and create new FAQs and Lists</MudText>
				</MudCardContent>
			</MudCard>
		</MudItem>
	</MudGrid>
	<hr />

	<MudGrid Justify="Justify.Center">
		@foreach (var qnaset in qnaSets)
		{
			<MudItem xs="12" sm="6">
				<MudCard>
					<MudCardHeader>
						<MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => DeleteQnASetAsync(qnaset.QnASetId))">
							<MudIcon Icon="@Icons.Material.Filled.Delete" />Delete Set
						</MudButton>
					</MudCardHeader>
					<MudCardContent>
						<MudTextField Label="Set Name" @bind-Value="qnaset.Name" Variant="Variant.Outlined" />
						<MudTextField Label="Set Description" @bind-Value="qnaset.Description" />
					</MudCardContent>
				</MudCard>
				<MudCard>
					<MudCardHeader>
						<MudText Typo="Typo.h3"><u>Questions:</u></MudText>	
					</MudCardHeader>
					<MudCardContent>
						@foreach (var qna in qnaset.QnAs)
						{
							<br />
							<MudText Typo="Typo.h5">@qna.Question</MudText>
							<MudText>@qna.Answer</MudText>
							<MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => DeleteQnAAsync(qna.QnaId))">
								<MudIcon Icon="@Icons.Material.Filled.Delete" /> Delete Q&A
							</MudButton>
							<br />
						}
						<MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => CreateQnAAsync(qnaset.QnASetId))">
							<MudIcon Icon="@Icons.Material.Filled.Add" /> Add Q&A
						</MudButton>
					</MudCardContent>
				</MudCard>
			</MudItem>
		}
	</MudGrid>

	<br />
	<br />
	<br />
	<MudGrid Justify="Justify.Center">
		<MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="CreateQnASetAsync">
			Create New Set
		</MudButton>
	</MudGrid>
	<style>
		.bg-blur {
		backdrop-filter: blur(10px);
		}
	</style>

}
@code {
	private List<QnASet> qnaSets = new();
	private QnASetModel? qnaSetModel = new();
	private IFAQApiService? FAQApiService;
	private bool initialized;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && OperatingSystem.IsBrowser())
		{
			FAQApiService = ServiceProvider.GetRequiredService<IFAQApiService>();

			qnaSets = await FAQApiService.GetQnASetsAsync();
			foreach (var qnaSet in qnaSets)
			{
				qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
			}

			initialized = true;
			StateHasChanged();
		}
	}

	private async Task DeleteQnAAsync(int qnaId)
	{
		await FAQApiService.DeleteQnAAsync(qnaId);
		await InitializeQnASets(); 
		StateHasChanged(); 
	}

	private async Task DeleteQnASetAsync(int qnaSetId)
	{
		await FAQApiService.DeleteQnASetAsync(qnaSetId);
		await InitializeQnASets(); 
		StateHasChanged(); 
	}

	private async Task CreateQnASetAsync()
	{
		var qnaSet = new QnASet();
		qnaSet.Name = "Name";
		qnaSet.Description = "Description";
		await FAQApiService.AddQnASetAsync(qnaSet);
		await InitializeQnASets(); 
		StateHasChanged(); 
	}

	private async Task CreateQnAAsync(int QnASetId)
	{
		await OpenQuestionEditDialogAsync(QnASetId);
	}

	private async Task OpenQuestionEditDialogAsync(int QnASetId)
	{
		var parameters = new DialogParameters();
		parameters.Add("QnASetId", QnASetId);
		parameters.Add("QnA", new QnA());
		parameters.Add("FaqApiService", FAQApiService);
		var options = new DialogOptions { BackgroundClass = "bg-blur" };

		var dialog = await DialogService.ShowAsync<QuestionModal>("New Q&A", options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			var qna = (QnA)result.Data;
			qna.QnASetId = QnASetId;
			await FAQApiService.AddQnAAsync(qna);
			await InitializeQnASets();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Dialog was cancelled");
		}
	}

	private async Task InitializeQnASets()
	{
		qnaSets = await FAQApiService.GetQnASetsAsync();
		foreach (var qnaSet in qnaSets)
		{
			qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
		}
	}

	private class QnASetModel
	{
		public string? Name { get; set; }
		public string? Description { get; set; }
		public int QnASetId { get; set; }
	}
}
