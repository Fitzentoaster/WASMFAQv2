@page "/edit"

@inject IJSRuntime JS
@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>@AppStrings.Edit</PageTitle>
@if (OperatingSystem.IsBrowser() == false)
{
	<p>@AppStrings.Loading</p>
}
else if (qnaSets == null)
{
	<MudOverlay Visible="true" Color="Color.Transparent" Class="d-flex justify-center align-center">
		<MudProgressCircular Indeterminate="true" />
	</MudOverlay>
}
else
{
	<MudThemeProvider IsDarkMode="@isDarkMode" />

	<MudLayout>
		<EditNavBar OnCreateQnASet="CreateQnASetAsync"
                    OnToggleTheme="ToggleTheme" />

		<FAQComponent faq="faq" OnEdit="EditFAQAsync" />

		
		<MudGrid Justify="Justify.Center" Class="mt-12">
			@foreach (var qnaSet in qnaSets.OrderBy(q => q.SortOrder))
			{
				<QnASetItem QnASet="qnaSet"
							OnMoveUp="MoveQnASetUp"
							OnMoveDown="MoveQnASetDown"
							OnDelete="@(set => DeleteQnASetAsync(set.QnASetId))"
							OnEdit="EditQnaSetAsync"
							OnMoveQnAUp="@(tuple => MoveQnAUp(tuple.QnA, tuple.QnASet))"
							OnMoveQnADown="@(tuple => MoveQnADown(tuple.QnA, tuple.QnASet))"
							OnDeleteQnA="@(q => DeleteQnAAsync(q.QnaId))"
							OnEditQnA="@(tuple => EditQnAAsync(tuple.QnA, tuple.QnASetId))"
							OnCreateQnA="CreateQnAAsync" />
			}

		</MudGrid>
	</MudLayout>
	<style>
		.bg-blur {
		backdrop-filter: blur(10px);
		}
	</style>

}
@code {
	private List<QnASet> qnaSets = new();
	private QnASetModel qnaSetModel = new();
	private FAQ faq = new();
	private IFAQApiService FAQApiService = null!;
	private ILocalStorageService LocalStorageService = null!; 
	private ISortManager SortManager = null!;
	private IQnAEditManager QnAEditManager = null!;
	private bool isDarkMode;

	// Lifecycle Methods
	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && OperatingSystem.IsBrowser())
		{
			FAQApiService = ServiceProvider.GetRequiredService<IFAQApiService>();
			LocalStorageService = ServiceProvider.GetRequiredService<ILocalStorageService>();
			SortManager = ServiceProvider.GetRequiredService<ISortManager>();
			QnAEditManager = ServiceProvider.GetRequiredService<IQnAEditManager>();
			isDarkMode = await LocalStorageService.GetItemAsync<bool>("isDarkMode");

			await FAQApiService.NormalizeQnASetSortOrderAsync();
			await FAQApiService.NormalizeQnASortOrderAsync();
			qnaSets = await FAQApiService.GetQnASetsAsync();
			foreach (var qnaSet in qnaSets)
			{
				qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
			}
			faq = await FAQApiService.GetFAQAsync();;
			StateHasChanged();
		}
	}

	// Initialization Methods
	private async Task InitializeQnASets()
	{
		qnaSets = await FAQApiService.GetQnASetsAsync();
		qnaSets = qnaSets.OrderBy(q => q.SortOrder).ToList();
		foreach (var qnaSet in qnaSets)
		{
			qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
			qnaSets = qnaSets.OrderBy(q => q.SortOrder).ToList();

		}
	}

	// QnASet Methods
	private async Task DeleteQnASetAsync(int qnaSetId)
	{
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = await DialogService.ShowAsync<ConfirmDeleteModal>(AppStrings.ConfirmDelete, options);
		var result = await dialog.Result;

		if (result is not null && !result.Canceled)
		{
			var qnaSet = qnaSets.FirstOrDefault(q => q.QnASetId == qnaSetId);

			await FAQApiService.DeleteQnASetAsync(qnaSetId);
			await InitializeQnASets();
			StateHasChanged();
			if (qnaSet != null && qnaSet.SortOrder > 1)
			{
				await ScrollToQnASet(qnaSet.SortOrder - 1);
			}
			else
			{
				await ScrollToQnASet(0);
			}
		}
	}

	private async Task EditQnaSetAsync(QnASet qnaSet)
	{
		var parameters = new DialogParameters();
		parameters.Add("qnaSet", qnaSet);
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = await DialogService.ShowAsync<QnASetEditModal>(AppStrings.EditQnASet, parameters, options);
		var result = await dialog.Result;
		if (result is not null && !result.Canceled)
		{
			var updated = result.Data as QnASet;
			if (updated is not null)
			{
				updated.QnASetId = qnaSet.QnASetId;
				updated.SortOrder = qnaSet.SortOrder;

				await FAQApiService.UpdateQnASetAsync(updated);
				await InitializeQnASets();
				StateHasChanged();
				await ScrollToQnASet(updated.SortOrder);
			}
		}
	}

	private async Task CreateQnASetAsync()
	{
		var parameters = new DialogParameters();
		parameters.Add("QnASet", new QnASet());
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = await DialogService.ShowAsync<QnASetModal>(AppStrings.NewQnASet, parameters, options);
		var result = await dialog.Result;
		if (result is not null && !result.Canceled && result.Data is QnASet qnaSet)
		{
			qnaSet.SortOrder = qnaSets.Count;
			await FAQApiService.AddQnASetAsync(qnaSet);
			await FAQApiService.NormalizeQnASetSortOrderAsync();
			await InitializeQnASets();
			StateHasChanged();
			await ScrollToQnASet(qnaSet.SortOrder);
		}

	}
	
	// QnA Methods
	private async Task CreateQnAAsync(int qnaSetId)
	{
		await QnAEditManager.CreateQnAAsync(qnaSetId, InitializeQnASets);
	}

	private async Task DeleteQnAAsync(int qnaId)
	{
		await QnAEditManager.DeleteQnAAsync(qnaId, InitializeQnASets);
	}

	private async Task EditQnAAsync(QnA qna, int qnaSetId)
	{
		await QnAEditManager.EditQnAAsync(qna, qnaSetId, InitializeQnASets);
	}

	// FAQ Methods
	private async Task EditFAQAsync(FAQ faq)
	{
		var parameters = new DialogParameters();
		parameters.Add("faq", faq);
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = await DialogService.ShowAsync<FAQEditModal>(AppStrings.EditModalTitle, parameters, options);
		var result = await dialog.Result;
		if (result is not null && !result.Canceled && result.Data is FAQ updated)
		{
			await FAQApiService.UpdateFAQAsync(updated);
			StateHasChanged();
		}
	}

	// Sort Methods
	private async Task MoveQnASetUp(QnASet qnaSet)
	{
		await SortManager.MoveQnASetUpAsync(qnaSet, qnaSets);
		await InitializeQnASets();
		StateHasChanged();
		await ScrollToQnASet(qnaSet.QnASetId);
	}

	private async Task MoveQnASetDown(QnASet qnaSet)
	{
		await SortManager.MoveQnASetDownAsync(qnaSet, qnaSets);
		await InitializeQnASets();
		StateHasChanged();
		await ScrollToQnASet(qnaSet.QnASetId);

	}

	private async Task MoveQnAUp(QnA qna, QnASet qnaSet)
	{
		await SortManager.MoveQnAUpAsync(qna, qnaSet);
		await InitializeQnASets();
		StateHasChanged();
		await ScrollToQnASet(qna.QnASetId);
	}

	private async Task MoveQnADown(QnA qna, QnASet qnaSet)
	{
		await SortManager.MoveQnADownAsync(qna, qnaSet);
		await InitializeQnASets();
		StateHasChanged();
		await ScrollToQnASet(qna.QnASetId);
	}

	private async Task ScrollToQnASet(int qnaSetId)
	{
		var elementId = $"qnaSet-{qnaSetId}";
		await JS.InvokeVoidAsync("scrollToElement", elementId);
	}

	// Theme Methods
	private async Task ToggleTheme()
	{
		isDarkMode = !isDarkMode;
		await LocalStorageService.SetItemAsync("isDarkMode", isDarkMode);
		StateHasChanged();
	}

	// Models
	private class QnASetModel
	{
		public string? Name { get; set; }
		public string? Description { get; set; }
		public int QnASetId { get; set; }
	}
}
