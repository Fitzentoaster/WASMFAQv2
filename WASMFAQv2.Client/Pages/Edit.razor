@page "/edit"

@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Edit</PageTitle>
@if (OperatingSystem.IsBrowser() == false)
{
	<p>Still rendering on the server</p>
}
else if (qnaSets == null)
{
	<MudGrid Justify="Justify.Center">
		<MudItem xs="12" sm="6">
			<MudCard>
				<MudCardHeader>
					<MudText Typo="Typo.h5"><b>Loading...</b></MudText>
				</MudCardHeader>
			</MudCard>
		</MudItem>
	</MudGrid>
}
else
{
	<MudThemeProvider IsDarkMode="true" />
	
	<MudLayout>
		<MudAppBar Elevation="4" Fixed="true">
			<MudGrid Justify="Justify.Center">
				<MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="CreateQnASetAsync">
					<MudIcon Icon="@Icons.Material.Filled.Add" />
				</MudButton>
				<MudButton Color="Color.Primary" Variant="Variant.Filled" Href="/">
					<MudIcon Icon="@Icons.Material.Filled.Home" />
				</MudButton>
			</MudGrid>
		</MudAppBar>
	
		<MudGrid Justify="Justify.Center" Class="mt-16">
			<MudItem xs="12" sm="6">
				<MudCard GutterBottom="true">
					<MudCardContent>
						<MudText Typo="Typo.h4">@faq.Title</MudText>
						<MudText Typo="Typo.h6">@faq.Description</MudText>
						<br />
						<br />
						<MudGrid Justify="Justify.Center">
							<MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => EditFAQAsync(faq))">
								<MudIcon Icon="@Icons.Material.Filled.Edit" />
							</MudButton>
						</MudGrid>
					</MudCardContent>
				</MudCard>
			</MudItem>
		</MudGrid>
		<br />
		<br />

		<br />
		<br />
		<MudGrid Justify="Justify.Center">
			@foreach (var qnaSet in qnaSets)
			{
				<MudItem xs="12" sm="8">
					<MudCard>
						<MudCardHeader Class="pe-0 ps-6">
							<MudGrid Justify="Justify.FlexStart">
								<MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="@(() => MoveQnASetUp(qnaSet))">
									<MudIcon Icon="@Icons.Material.Filled.ArrowCircleUp" />
								</MudButton>
								<MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="@(() => MoveQnASetDown(qnaSet))">
									<MudIcon Icon="@Icons.Material.Filled.ArrowCircleDown" />
								</MudButton>
							</MudGrid>
							<MudGrid Justify="Justify.FlexEnd">

								<MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => DeleteQnASetAsync(qnaSet.QnASetId))">
									<MudIcon Icon="@Icons.Material.Filled.Delete" />
								</MudButton>
								<MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => EditQnaSetAsync(qnaSet))">
									<MudIcon Icon="@Icons.Material.Filled.Edit" />
								</MudButton>
							</MudGrid>
						</MudCardHeader>
						<MudCardContent>
							<MudText Label="Set Name" Typo="Typo.h4"><u>@qnaSet.Name</u></MudText>
							<MudText Label="Set Description" Typo="Typo.h6">@qnaSet.Description</MudText>
						</MudCardContent>
					</MudCard>
					<MudCard>
						<MudCardHeader>
							<MudText Typo="Typo.h6">Q&As:</MudText>	
						</MudCardHeader>
						<MudCardContent>
							@foreach (var qna in qnaSet.QnAs)
							{
								<MudCard>
									<MudGrid Justify="Justify.SpaceBetween" Class="mb-4">
										<MudItem xs="2" md="1">
											<MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="@(() => MoveQnAUp(qna, qnaSet))">
												<MudIcon Icon="@Icons.Material.Filled.ArrowCircleUp" />
											</MudButton>
										</MudItem>
										<MudItem xs="2" md="1">
											<MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="@(() => MoveQnADown(qna, qnaSet))">
												<MudIcon Icon="@Icons.Material.Filled.ArrowCircleDown" />
											</MudButton>
										</MudItem>
										<MudItem xs="12" sm="4" md="8">
											<MudText Typo="Typo.h5">@qna.Question</MudText>
											<MudText Markup="true">
												@((MarkupString)qna.Answer)
											</MudText>
										</MudItem>
										<MudItem xs="2" md="1">
											<MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="@(() => DeleteQnAAsync(qna.QnaId))">
												<MudIcon Icon="@Icons.Material.Filled.Delete" />
											</MudButton>
										</MudItem>
										<MudItem xs="2" md="1">
											<MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => EditQnAAsync(qna, qnaSet.QnASetId))">
												<MudIcon Icon="@Icons.Material.Filled.Edit" />
											</MudButton>
										</MudItem>

									</MudGrid>
								</MudCard>
								<br />
							}
							<MudGrid Justify="Justify.Center">
								<MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="@(() => CreateQnAAsync(qnaSet.QnASetId))">
									<MudIcon Icon="@Icons.Material.Filled.Add" />
								</MudButton>
							</MudGrid>
						</MudCardContent>
					</MudCard>
				</MudItem>
			}

		</MudGrid>
	</MudLayout>
	<style>
		.bg-blur {
		backdrop-filter: blur(10px);
		}
	</style>

}
@code {
	private List<QnASet> qnaSets = new();
	private QnASetModel? qnaSetModel = new();
	private FAQ faq = new();
	private IFAQApiService? FAQApiService;
	private bool initialized;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && OperatingSystem.IsBrowser())
		{
			FAQApiService = ServiceProvider.GetRequiredService<IFAQApiService>();
			await FAQApiService.NormalizeQnASetSortOrderAsync();
			await FAQApiService.NormalizeQnASortOrderAsync();
			qnaSets = await FAQApiService.GetQnASetsAsync();
			foreach (var qnaSet in qnaSets)
			{
				qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
			}
			faq = await FAQApiService.GetFAQAsync();
			initialized = true;
			StateHasChanged();
		}
	}

	private async Task DeleteQnAAsync(int qnaId)
	{
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = DialogService.Show<ConfirmDeleteModal>("Confirm Delete", options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			await FAQApiService.DeleteQnAAsync(qnaId);
			await InitializeQnASets();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Dialog was cancelled.");
		}
	}

	private async Task DeleteQnASetAsync(int qnaSetId)
	{
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = DialogService.Show<ConfirmDeleteModal>("Confirm Delete", options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			await FAQApiService.DeleteQnASetAsync(qnaSetId);
			await InitializeQnASets();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Dialog was cancelled.");
		}

	}

	private async Task EditQnaSetAsync(QnASet qnaSet)
	{
		var parameters = new DialogParameters();
		parameters.Add("qnaSet", qnaSet);
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = await DialogService.ShowAsync<QnASetEditModal>("Edit Q&A Set", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			var updated = (QnASet)result.Data;
			updated.QnASetId = qnaSet.QnASetId;
			updated.SortOrder = qnaSet.SortOrder;

			await FAQApiService.UpdateQnASetAsync(updated);
			await InitializeQnASets();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Dialog was cancelled");
		}

	}

	private async Task CreateQnASetAsync()
	{
		var parameters = new DialogParameters();
		parameters.Add("QnASet", new QnASet());
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = await DialogService.ShowAsync<QnASetModal>("New Q&A Set", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			var qnaSet = (QnASet)result.Data;
			qnaSet.SortOrder = qnaSets.Count + 1;
			await FAQApiService.AddQnASetAsync(qnaSet);
			await FAQApiService.NormalizeQnASetSortOrderAsync();
			await InitializeQnASets();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Dialog was cancelled");
		}

	}

	private async Task CreateQnAAsync(int QnASetId)
	{
		var parameters = new DialogParameters();
		parameters.Add("QnASetId", QnASetId);
		parameters.Add("qna", new QnA());
		var options = new DialogOptions
			{
				BackgroundClass = "bg-blur",
				MaxWidth = MaxWidth.Large,
				FullWidth = true
			};
		var dialog = await DialogService.ShowAsync<QnAModal>("New Q&A", parameters, options);
		var result = await dialog.Result;

		if (!result.Canceled)
		{
			var qna = (QnA)result.Data;
			qna.QnASetId = QnASetId;
			qna.SortOrder = qnaSets.FirstOrDefault(q => q.QnASetId == QnASetId)?.QnAs.Count + 1 ?? 1;
			await FAQApiService.AddQnAAsync(qna);
			await FAQApiService.NormalizeQnASortOrderAsync();
			await InitializeQnASets();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Dialog was cancelled");
		}
	}

	private async Task EditQnAAsync(QnA qna, int qnaSetId)
	{
		var parameters = new DialogParameters();
		parameters.Add("qna", qna);
		parameters.Add("QnASetId", qnaSetId); 
		var options = new DialogOptions
			{
				BackgroundClass = "bg-blur",
				MaxWidth = MaxWidth.Large,
				FullWidth = true
			}; 
		var dialog = await DialogService.ShowAsync<QnAEditModal>("Edit Q&A", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			var updated = (QnA)result.Data;
			updated.QnASetId = qnaSetId;
			updated.SortOrder = qna.SortOrder;

			await FAQApiService.UpdateQnAAsync(updated);
			await InitializeQnASets();
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Dialog was cancelled");
		}
	}

	private async Task EditFAQAsync(FAQ faq)
	{
		var parameters = new DialogParameters();
		parameters.Add("faq", faq);
		var options = new DialogOptions { BackgroundClass = "bg-blur" };
		var dialog = await DialogService.ShowAsync<FAQEditModal>("Edit FAQ Data", parameters, options);
		var result = await dialog.Result;
		if (!result.Canceled)
		{
			faq = (FAQ)result.Data;
			await FAQApiService.UpdateFAQAsync(faq);
			StateHasChanged();
		}
		else
		{
			Console.WriteLine("Dialog was cancelled");
		}
	}

	private async Task MoveQnASetUp(QnASet qnaSet)
	{
		var ordered = qnaSets.OrderBy(q => q.SortOrder).ToList();
		var index = ordered.FindIndex(q => q.QnASetId == qnaSet.QnASetId);
		if (index <= 0) return;

		var above = ordered[index - 1];

		int temp = qnaSet.SortOrder;
		qnaSet.SortOrder = above.SortOrder;
		above.SortOrder = temp;

		await FAQApiService.UpdateQnASetAsync(qnaSet);
		await FAQApiService.UpdateQnASetAsync(above);
		qnaSets = qnaSets.OrderBy(q => q.SortOrder).ToList();
		StateHasChanged();
	}

	private async Task MoveQnASetDown(QnASet qnaSet)
	{
		var ordered = qnaSets.OrderBy(q => q.SortOrder).ToList();
		var index = ordered.FindIndex(q => q.QnASetId == qnaSet.QnASetId);
		if (index < 0 || index >= ordered.Count - 1) return;

		var below = ordered[index + 1];

		int temp = qnaSet.SortOrder;
		qnaSet.SortOrder = below.SortOrder;
		below.SortOrder = temp;

		await FAQApiService.UpdateQnASetAsync(qnaSet);
		await FAQApiService.UpdateQnASetAsync(below);
		qnaSets = qnaSets.OrderBy(q => q.SortOrder).ToList();
		StateHasChanged();
	}

	private async Task MoveQnAUp(QnA qna, QnASet qnaSet)
	{
		var ordered = qnaSet.QnAs.OrderBy(q => q.SortOrder).ToList();
		var index = ordered.FindIndex(q => q.QnaId == qna.QnaId);
		if (index <= 0) return;
		var above = ordered[index - 1];

		int temp = qna.SortOrder;
		qna.SortOrder = above.SortOrder;
		above.SortOrder = temp;

		await FAQApiService.UpdateQnAAsync(qna);
		await FAQApiService.UpdateQnAAsync(above);
		await FAQApiService.NormalizeQnASortOrderAsync();
		qnaSet.QnAs = qnaSet.QnAs.OrderBy(q => q.SortOrder).ToList();
		StateHasChanged();
	}

	private async Task MoveQnADown(QnA qna, QnASet qnaSet)
	{
		var ordered = qnaSet.QnAs.OrderBy(q => q.SortOrder).ToList();
		var index = ordered.FindIndex(q => q.QnaId == qna.QnaId);
		if (index < 0 || index >= ordered.Count - 1) return;

		var below = ordered[index + 1];

		int temp = qna.SortOrder;
		qna.SortOrder = below.SortOrder;
		below.SortOrder = temp;

		await FAQApiService.UpdateQnAAsync(qna);
		await FAQApiService.UpdateQnAAsync(below);
		await FAQApiService.NormalizeQnASortOrderAsync();
		qnaSet.QnAs = qnaSet.QnAs.OrderBy(q => q.SortOrder).ToList();
		StateHasChanged();
	}

	private async Task InitializeQnASets()
	{
		qnaSets = await FAQApiService.GetQnASetsAsync();
		qnaSets = qnaSets.OrderBy(q => q.SortOrder).ToList();
		foreach (var qnaSet in qnaSets)
		{
			qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
			qnaSets = qnaSets.OrderBy(q => q.SortOrder).ToList();

		}
	}

	private class QnASetModel
	{
		public string? Name { get; set; }
		public string? Description { get; set; }
		public int QnASetId { get; set; }
	}
}
