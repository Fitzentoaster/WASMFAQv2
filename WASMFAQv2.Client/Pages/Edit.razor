@page "/edit"

@inject IServiceProvider ServiceProvider
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>
@if (OperatingSystem.IsBrowser() == false)
{
	<p>Still rendering on the server</p>
}
else if (qnaSets == null)
{
	<MudGrid Justify="Justify.Center">
		<MudItem xs="12" sm="6">
			<MudCard>
				<MudCardHeader>
					<MudText Typo="Typo.h5"><b>Loading...</b></MudText>
				</MudCardHeader>
			</MudCard>
		</MudItem>
	</MudGrid>
}
else
{
	<MudThemeProvider IsDarkMode="true" />

	<MudGrid Justify="Justify.Center">
		<MudItem xs="12" sm="6">
			<MudCard GutterBottom="true">
				<MudCardHeader>
					<MudText Typo="Typo.h5"><b>Edit FAQs</b></MudText>
				</MudCardHeader>
				<MudCardContent>
					<MudText>Here you can view and edit FAQs and create new FAQs and Lists</MudText>
				</MudCardContent>
			</MudCard>
		</MudItem>
	</MudGrid>
	<hr />

	<MudGrid Justify="Justify.Center">
		@foreach (var qnaSet in qnaSets)
		{
			<MudItem xs="12" sm="6">
				<MudCard>
					<MudCard GutterBottom="true">
						<MudCardHeader>
							<MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="() => DeleteQnASetAsync(qnaSet.QnASetId)">
								Delete Set
							</MudButton>
						</MudCardHeader>
						<MudCardContent>
							<MudTextField Label="Set Name" @bind-Value="qnaSet.Name" Variant="Variant.Outlined" />
							<MudTextField Label="Set Description" @bind-Value="qnaSet.Description"></MudTextField>

						</MudCardContent>
					</MudCard>
					<br />
					@foreach (var qna in qnaSet.QnAs)
					{
						<EditForm Model="qnaModel">
							<MudCard GutterBottom="true">
								<MudCardHeader>
									<MudTextField Label="Question" Typo="Typo.h6" @bind-Value="qna.Question"></MudTextField>
								</MudCardHeader>
								<MudCardContent>
									<MudTextField Label="Answer" @bind-Value="qna.Answer"></MudTextField>
									<MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="() => DeleteQnAAsync(qna.QnAId)">
										Delete Q&A
									</MudButton>
									<MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="() => SaveQnAAsync(qna.QnAId)" >
										Save Q&A
									</MudButton>
								</MudCardContent>
							</MudCard>
						</EditForm>
					}
				</MudCard>
				<MudGrid Justify="Justify.FlexEnd">
					<MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="() => CreateQnAAsync(qnaSet.QnASetId)">Add Q&A</MudButton>
				</MudGrid>
			</MudItem>
		}
	</MudGrid>
	<br />
	<br />
	<br />
	<MudGrid Justify="Justify.Center">
		<MudButton Color="Color.Primary" ButtonType="ButtonType.Submit" Variant="Variant.Filled" OnClick="SaveButtonAsync">Save Changes</MudButton>
		<MudButton Color="Color.Success" Variant="Variant.Filled" @onclick="CreateQnASetAsync">
			Create New Set
		</MudButton>
	</MudGrid>

}
@code {
	private List<QnASet> qnaSets = new();
	private QNAModel? qnaModel = new();
	private IFAQApiService? FAQApiService;
	private bool initialized;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && OperatingSystem.IsBrowser())
		{
			FAQApiService = ServiceProvider.GetRequiredService<IFAQApiService>();

			qnaSets = await FAQApiService.GetQnASetsAsync();
			foreach (var qnaSet in qnaSets)
			{
				qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
			}

			initialized = true;
			StateHasChanged();
		}
	}

	private async Task DeleteQnAAsync(int qnaId)
	{
		await FAQApiService.DeleteQnAAsync(qnaId);
		await InitializeQnASets(); 
		StateHasChanged(); 
	}

	private async Task DeleteQnASetAsync(int qnaSetId)
	{
		await FAQApiService.DeleteQnASetAsync(qnaSetId);
		await InitializeQnASets(); 
		StateHasChanged(); 
	}

	private async Task CreateQnASetAsync()
	{
		await FAQApiService.AddQnASetAsync(new QnASet());
		await InitializeQnASets(); 
		StateHasChanged(); 
	}

	private async Task CreateQnAAsync(int QnASetId)
	{
		QnA qna = new QnA();
		qna.QnASetId = QnASetId;
		qna.Question = "Question?";
		qna.Answer = "Answer";
		await FAQApiService.AddQnAAsync(qna);
		await InitializeQnASets();
		StateHasChanged(); 
	}

	private async Task SaveQnAAsync(int qnaId)
	{
		QnA qna = new QnA();
		qna.QnAId = qnaId;
		qna.Question = qnaModel.Question;
		qna.Answer = qnaModel.Answer;
		await FAQApiService.UpdateQnAAsync(qna, qnaId);
		await InitializeQnASets();
		StateHasChanged();
	}

	private async Task SaveButtonAsync()
	{
		NavigationManager.NavigateTo("/");
	}

	private async Task InitializeQnASets()
	{
		qnaSets = await FAQApiService.GetQnASetsAsync();
		foreach (var qnaSet in qnaSets)
		{
			qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
		}
	}
	private class QNAModel
	{
		public string? Question { get; set; }
		public string? Answer { get; set; }
		public int QnAId { get; set; }
	}
}
