@page "/"

@using WASMFAQv2.Shared.Interfaces

@inject IServiceProvider ServiceProvider

<PageTitle>Home</PageTitle>
@if (OperatingSystem.IsBrowser() == false)
{
	<p>Still rendering on the server</p>
}
else if (qnaSets == null)
{
	<MudGrid Justify="Justify.Center">
		<MudItem xs="12" sm="6">
			<MudCard>
				<MudCardHeader>
					<MudText Typo="Typo.h5"><b>Loading...</b></MudText>
				</MudCardHeader>
			</MudCard>
		</MudItem>
	</MudGrid>
}
else
{
	<MudThemeProvider IsDarkMode="true" />
	@if (faq is not null)
	{
		<MudGrid Justify="Justify.Center">
			<MudItem xs="12" sm="6">
				<MudCard>
					<MudCardHeader>
						<MudText Typo="Typo.h4"><b>@faq.Title</b></MudText>
					</MudCardHeader>
					<MudCardContent>
						<MudText>@faq.Description</MudText>
					</MudCardContent>
				</MudCard>
			</MudItem>
		</MudGrid>
	}

	@foreach (var qnaSet in qnaSets)
	{
		<MudGrid Justify="Justify.Center">
			<MudItem xs="12" sm="6">
				<MudExpansionPanels MultiExpansion="true" Elevation="3">
					<MudExpansionPanel>
						<TitleContent>
							<MudText Typo="Typo.h5"><b>@qnaSet.Name</b></MudText>
						</TitleContent>
						<ChildContent>
							<MudText Typo="Typo.body1">@qnaSet.Description</MudText>

							<MudExpansionPanels MultiExpansion="true">
								@foreach (var qna in qnaSet.QnAs ?? Enumerable.Empty<QnA>())
								{
									<MudExpansionPanel>
										<TitleContent>
											<MudText Typo="Typo.h6">@qna.Question</MudText>
										</TitleContent>
										<ChildContent>
											<MudText Typo="Typo.body1" Markup="true">
													@((MarkupString)(qna.Answer ?? string.Empty))
											</MudText>

										</ChildContent>
									</MudExpansionPanel>
								}
							</MudExpansionPanels>
						</ChildContent>
					</MudExpansionPanel>
				</MudExpansionPanels>
			</MudItem>
		</MudGrid>
	}
	<br />
	<br />
	<br />

	<MudGrid Justify="Justify.Center">
		<MudButton Color="Color.Primary" Variant="Variant.Filled" Href="edit">
			Edit
		</MudButton>
	</MudGrid>
}
@code {
	private IFAQApiService? FAQApiService;
	private List<QnASet>? qnaSets;
	private FAQ? faq;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && OperatingSystem.IsBrowser())
		{
			FAQApiService = ServiceProvider.GetRequiredService<IFAQApiService>();
			faq = await FAQApiService.GetFAQAsync();
			if (faq == null)
			{
				faq = new FAQ
					{
						Title = "FAQ",
						Description = "Frequently Asked Questions"
					};
				await FAQApiService.CreateFAQAsync(faq);
			}
			qnaSets = await FAQApiService.GetQnASetsAsync();
			qnaSets = qnaSets.OrderBy(q => q.SortOrder).ToList();

			foreach (var qnaSet in qnaSets)
			{
				qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
				qnaSet.QnAs = qnaSet.QnAs.OrderBy(q => q.SortOrder).ToList();
			}

			StateHasChanged(); 
		}
	}


}