@page "/"

@using WASMFAQv2.Shared.Interfaces

@inject IServiceProvider ServiceProvider

<PageTitle>@AppStrings.Home</PageTitle>
@if (OperatingSystem.IsBrowser() == false)
{
	<p>@AppStrings.Loading</p>
}
else if (qnaSets == null)
{
	<MudOverlay Visible="true" Color="Color.Transparent" Class="d-flex justify-center align-center">
		<MudProgressCircular Indeterminate="true" />
	</MudOverlay>
}
else
{
	<MudAppBar Elevation="4" Fixed="true">
		<MudGrid Justify="Justify.Center">
			<MudButton Color="Color.Primary" Variant="Variant.Filled" Href="edit">
				@AppStrings.Edit
			</MudButton>
			<MudButton Color="Color.Transparent" Variant="Variant.Filled" OnClick="ToggleTheme">
				<MudIcon Icon="@Icons.Material.Filled.Brightness4" />
			</MudButton>
		</MudGrid>
	</MudAppBar>
	<MudThemeProvider IsDarkMode="@isDarkMode" />
	@if (faq is not null)
	{
		<MudGrid Justify="Justify.Center" Class="mt-16">
			<MudItem xs="12" sm="6">
				<MudCard>
					<MudCardHeader>
						<MudText Typo="Typo.h4"><b>@faq.Title</b></MudText>
					</MudCardHeader>
					<MudCardContent>
						<MudText>@faq.Description</MudText>
					</MudCardContent>
				</MudCard>
			</MudItem>
		</MudGrid>
	}

	@foreach (var qnaSet in qnaSets.OrderBy(q => q.SortOrder))
	{
		<MudGrid Justify="Justify.Center">
			<MudItem xs="12" sm="6">
				<MudExpansionPanels MultiExpansion="true" Elevation="3">
					<MudExpansionPanel>
						<TitleContent>
							<MudText Typo="Typo.h5"><b>@qnaSet.Name</b></MudText>
						</TitleContent>
						<ChildContent>
							<MudText Typo="Typo.body1">@qnaSet.Description</MudText>

							<MudExpansionPanels MultiExpansion="true">
								@foreach (var qna in (qnaSet.QnAs ?? Enumerable.Empty<QnA>()).OrderBy(q => q.SortOrder))
								{
									<MudExpansionPanel>
										<TitleContent>
											<MudText Typo="Typo.h6">@qna.Question</MudText>
										</TitleContent>
										<ChildContent>
											<MudText Typo="Typo.body1" Markup="true">
													@((MarkupString)(qna.Answer ?? string.Empty))
											</MudText>

										</ChildContent>
									</MudExpansionPanel>
								}
							</MudExpansionPanels>
						</ChildContent>
					</MudExpansionPanel>
				</MudExpansionPanels>
			</MudItem>
		</MudGrid>
	}
	<br />
	<br />
	<br />
}
@code {
	private IFAQApiService FAQApiService = null!;
	private ILocalStorageService? LocalStorageService = null!;
	private List<QnASet>? qnaSets;
	private bool isDarkMode;
	private FAQ? faq;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && OperatingSystem.IsBrowser())
		{
			FAQApiService = ServiceProvider.GetRequiredService<IFAQApiService>();
			LocalStorageService = ServiceProvider.GetRequiredService<ILocalStorageService>();
			isDarkMode = await LocalStorageService.GetItemAsync<bool>("isDarkMode");
			faq = await FAQApiService.GetFAQAsync();
			if (faq == null)
			{
				faq = new FAQ
					{
						Title = AppStrings.FAQDefaultTitle,
						Description = AppStrings.FAQDefaultDescription
					};
				await FAQApiService.CreateFAQAsync(faq);
			}
			qnaSets = await FAQApiService.GetQnASetsAsync();
			qnaSets = qnaSets.OrderBy(q => q.SortOrder).ToList();

			foreach (var qnaSet in qnaSets)
			{
				qnaSet.QnAs = await FAQApiService.GetQuestionsByQnASetIdAsync(qnaSet.QnASetId);
				qnaSet.QnAs = qnaSet.QnAs.OrderBy(q => q.SortOrder).ToList();
			}

			StateHasChanged(); 
		}
	}

	// Theme Methods
	private async Task ToggleTheme()
	{
		isDarkMode = !isDarkMode;
		await LocalStorageService!.SetItemAsync("isDarkMode", isDarkMode);
		StateHasChanged();
	}
}